generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
// ==========================
// Roles & Users
// ==========================
model Role {
  id          Int      @id @default(autoincrement())
  name        String      @unique
  description String?
  users       UserRole[]  // relation to UserRole join table
  
  @@map("role")
}

model UserRole {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int

  @@unique([userId, roleId]) // prevent duplicate role for a user
  @@map("userrole")
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  passwordHash String
  phone        String?
  gender        String?
  role         String?
  roles        UserRole[] // many-to-many through UserRole
  createdAt    DateTime   @default(now())
  imageUrl     String?
  addresses    Address[]
  cart         Cart[]
  orders       Order[]    @relation("CustomerOrders")
  deliveries   Order[]    @relation("DeliveryOrders")
  vendor       Vendor?
  deliveryAgent  DeliveryAgent?
  logReports   LogReport[]  // added for logging

  @@map("user")
}

model Vendor {
  id            Int            @id @default(autoincrement())
  userId        Int            @unique
  shopName      String
  shopAddress   String?
  isActive      Boolean        @default(true)
  shopEmail     String?
  shopLatitude  Float?
  shopLocation  String
  shopLongitude Float?
  shopOwner     String?
  shopPhone     String
  shopWebsite   String?
  orders        Order[]
  products      Product[]
  user          User           @relation(fields: [userId], references: [id])
  images        VendorImage[]  // âœ… one-to-many relation
  videos        VendorVideo[]  // âœ… one-to-many relation
  logReports    LogReport[]    // âœ… existing relation

  @@map("vendor")
}

model VendorImage {
  id       Int     @id @default(autoincrement())
  url      String
  alt      String?
  vendorId Int
  vendor   Vendor  @relation(fields: [vendorId], references: [id])

  @@index([vendorId], map: "vendorimage_vendorId_fkey")
  @@map("vendorimage")
}

model VendorVideo {
  id       Int     @id @default(autoincrement())
  url      String
  caption  String?
  vendorId Int
  vendor   Vendor  @relation(fields: [vendorId], references: [id])

  @@index([vendorId], map: "vendorvideo_vendorId_fkey")
  @@map("vendorvideo")
}

model Product {
  id              Int              @id @default(autoincrement())
  vendorId        Int
  name            String
  description     String
  price           Float?             
  available       Boolean          @default(true)
  createdAt       DateTime         @default(now())
  SKU             String?
  stock           Int
  updatedAt       DateTime         @updatedAt
  averageRating   Float?
  barcode         String?
  categoryId      Int
  currency        String           @default("GHS")
  dimensions      String?
  discountPrice   Float?
  features        Json?
  isApproved      Boolean          @default(false)
  isFeatured      Boolean          @default(false)
  longDescription String?
  slug            String           @unique
  stockStatus     String           @default("In Stock")
  subCategoryId   Int?
  weight          Float?
  brandId         Int?
  materialId      Int?
  originId        Int?
  tag             String?
  CartItem        CartItem[]
  orderItems      OrderItem[]
  brand           Brand?            @relation(fields: [brandId], references: [id])
  category        Category          @relation(fields: [categoryId], references: [id])
  material        Material?         @relation(fields: [materialId], references: [id])
  origin          Origin?           @relation(fields: [originId], references: [id])
  subCategory     SubCategory?     @relation(fields: [subCategoryId], references: [id])
  vendor          Vendor           @relation(fields: [vendorId], references: [id])
  variants        ProductVariant[]
  videos          ProductVideo[]
  ratings         Rating[]
  reviews         Review[]
  logReports   LogReport[]   // ðŸ‘ˆ add this

  @@index([brandId], map: "product_brandId_fkey")
  @@index([categoryId], map: "product_categoryId_fkey")
  @@index([materialId], map: "product_materialId_fkey")
  @@index([originId], map: "product_originId_fkey")
  @@index([subCategoryId], map: "product_subCategoryId_fkey")
  @@index([vendorId], map: "product_vendorId_fkey")
  @@map("product")
}

model ProductVariant {
  id            Int            @id @default(autoincrement())
  productId     Int
  color         String?
  size          String?
  SKU           String?
  stock         Int
  price         Float
  available     Boolean        @default(true)
  barcode       String?
  createdAt     DateTime       @default(now())
  discountPrice Float?
  stockStatus   String         @default("In Stock")
  updatedAt     DateTime       @updatedAt
  cartItems     CartItem[]
  orderItem     OrderItem[]
  images        ProductImage[]
  product       Product        @relation(fields: [productId], references: [id])

  @@index([productId], map: "productvariant_productId_fkey")
  @@map("productvariant")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  products      Product[]
  subCategories SubCategory[]

  @@map("category")
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "subcategory_categoryId_fkey")
  @@map("subcategory")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("brand")
}

model Material {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("material")
}

model Origin {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("origin")
}

model Color {
  id   Int    @id @default(autoincrement())
  name String

  @@map("color")
}

model Size {
  id   Int    @id @default(autoincrement())
  name String

  @@map("size")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String

  @@map("tag")
}

model ProductImage {
  id               Int             @id @default(autoincrement())
  url              String
  alt              String?
  productVariantId Int?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@index([productVariantId], map: "productimage_productVariantId_fkey")
  @@map("productimage")
}

model ProductVideo {
  id        Int     @id @default(autoincrement())
  url       String
  caption   String?
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId], map: "productvideo_productId_fkey")
  @@map("productvideo")
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId], map: "rating_productId_fkey")
  @@map("rating")
}

model Review {
  id        Int      @id @default(autoincrement())
  title     String
  comment   String
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId], map: "review_productId_fkey")
  @@map("review")
}

model Payment {
  id            Int         @id @default(autoincrement())
  orderId       Int?        @unique
  method        String
  status        String
  paidAt        DateTime?
  amount        Float
  reference     String?
  transactionId Int         @unique
  order         Order?      @relation(fields: [orderId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("payment")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  orderId   Int?
  amount    Float
  status    String
  method    String
  reference String
  rawData   Json?
  createdAt DateTime @default(now())
  payment   Payment?
  order     Order?   @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "transaction_orderId_fkey")
  @@map("transaction")
}

model Delivery {
  id          Int       @id @default(autoincrement())
  orderId     Int       @unique
  driverId    Int?
  status      String    @default("pending")
  startedAt   DateTime?
  deliveredAt DateTime?
  notes       String?
  order       Order     @relation(fields: [orderId], references: [id])

  @@map("delivery")
}

model Order {
  id             Int            @id @default(autoincrement())
  customerId     Int
  vendorId       Int           
  deliveryId     Int?
  status         OrderStatus    @default(pending)
  totalAmount    Float
  placedAt       DateTime       @default(now())
  paymentDate    DateTime?
  paymentMethod  PaymentMethod?
  paymentRef     String?
  paymentStatus  PaymentStatus  @default(unpaid)
  platformFee    Float          @default(0)
  vendorEarning  Float          @default(0)
  paymentError   String?
  refundReason   String?
  addressId      Int?
  createdAt      DateTime       @default(now())
  deliveryStatus DeliveryStatus @default(pending)
  latitude       Float?
  longitude      Float?
  updatedAt      DateTime       @updatedAt
  shippingFee    Float          @default(0)
  subtotal       Float
  Delivery       Delivery?
  address        Address?       @relation(fields: [addressId], references: [id])
  customer       User           @relation("CustomerOrders", fields: [customerId], references: [id])
  delivery       User?          @relation("DeliveryOrders", fields: [deliveryId], references: [id])
  vendor         Vendor        @relation(fields: [vendorId], references: [id])
  items          OrderItem[]
  payment        Payment?
  transactions   Transaction[]
  logReports   LogReport[]   // ðŸ‘ˆ add this

  @@index([addressId], map: "order_addressId_fkey")
  @@index([customerId], map: "order_customerId_fkey")
  @@index([deliveryId], map: "order_deliveryId_fkey")
  @@index([vendorId], map: "order_vendorId_fkey")
  @@map("order")
}

model OrderItem {
  id        Int             @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  createdAt DateTime        @default(now())
  subtotal  Float
  unitPrice Float
  updatedAt DateTime        @updatedAt
  variantId Int?
  order     Order           @relation(fields: [orderId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId], map: "orderitem_orderId_fkey")
  @@index([productId], map: "orderitem_productId_fkey")
  @@index([variantId], map: "orderitem_variantId_fkey")
  @@map("orderitem")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([userId], map: "cart_userId_fkey")
  @@map("cart")
}

model CartItem {
  id        Int             @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  variantId Int?
  cart      Cart            @relation(fields: [cartId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([cartId], map: "cartitem_cartId_fkey")
  @@index([productId], map: "cartitem_productId_fkey")
  @@index([variantId], map: "cartitem_variantId_fkey")
  @@map("cartitem")
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  city      String
  region    String
  longitude Float?
  latitude  Float?
  country   String
  createdAt DateTime @default(now())
  phone     String
  street    String
  title     String
  isDefault Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  orders    Order[]

  @@index([userId], map: "address_userId_fkey")
  @@map("address")
}

model DeliveryAgent {
  id             String   @id @default(uuid())
  userId         Int   @unique
  licenseNumber  String
  nationalId     String           // e.g., Ghana Card, Passport, or SSNIT
  vehicleType    String
  vehiclePlate   String
  vehicleColor   String?
  agentAddress   String
  dateOfBirth    DateTime
  emergencyContactName   String
  emergencyContactPhone  String
  region         String           // operational region
  gpsLocation    String?          // optional GPS / lat-long
  profileImage   String?          // agent picture
  idCardImage    String?          // scan/photo of ID
  licenseImage   String?          // scan/photo of driverâ€™s license
  isActive       Boolean  @default(false)
  isVerified     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationship with User
  user User @relation(fields: [userId], references: [id])

  @@map("deliveryagent")
}

model ImageSlider {
  id               Int     @id @default(autoincrement())
  category         String
  name             String?
  shortDescription String?
  longDescription  String?
  imageUrl         String

  @@map("imageslider")
}
 
model videoslider {
  id               Int     @id @default(autoincrement())
  category         String
  name             String?
  shortDescription String?
  longDescription  String?
  videoUrl         String
}
model GeneralLogReport {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  level     String   // e.g. "info", "warning", "error"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("generallogreport")
}

model PublicPage {
  id          Int                @id @default(autoincrement())
  slug        String             @unique  // "home", "about", "pricing", etc.
  title       String
  description String

  // Placement flags
  showInHeader Boolean           @default(false)
  showInFooter Boolean           @default(false)
  isVisible    Boolean           @default(true)

  // Relations
  origins     PublicPageOrigin[]
}


model PublicPageOrigin {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  publicPageId Int
  publicPage   PublicPage   @relation(fields: [publicPageId], references: [id])

  images       PublicOriginImage[]
}

model PublicOriginImage {
  id          Int         @id @default(autoincrement())
  imageUrl    String
  pageOriginId Int
  pageOrigin   PublicPageOrigin @relation(fields: [pageOriginId], references: [id])
}



model LogReport {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  level     String   // e.g. "info", "warning", "error"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    Int?     
  orderId   Int?
  productId Int?
  vendorId  Int?

  user      User?    @relation(fields: [userId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  vendor    Vendor?  @relation(fields: [vendorId], references: [id])

  @@map("logreport")
}


enum RoleEnum {
  customer
  vendor
  delivery
  admin
}

enum OrderStatus {
  pending
  accepted
  preparing
  picked
  delivered
  cancelled
  failed
  refunded
}

enum PaymentMethod {
  cash
  momo
  card
}

enum PaymentStatus {
  pending
  unpaid
  paid
  failed
  refunded
}

enum DeliveryStatus {
  pending
  enroute
  delivered
}
